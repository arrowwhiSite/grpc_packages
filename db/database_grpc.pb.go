// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: database.proto

package db

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClientService_SelectClientByLogin_FullMethodName  = "/chat.ClientService/SelectClientByLogin"
	ClientService_ChangeProfilePhoto_FullMethodName   = "/chat.ClientService/ChangeProfilePhoto"
	ClientService_UpdateClientPassword_FullMethodName = "/chat.ClientService/UpdateClientPassword"
	ClientService_AddClient_FullMethodName            = "/chat.ClientService/AddClient"
	ClientService_GetLogins_FullMethodName            = "/chat.ClientService/GetLogins"
)

// ClientServiceClient is the client API for ClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientServiceClient interface {
	// Метод для выборки клиента по логину
	SelectClientByLogin(ctx context.Context, in *SelectClientRequest, opts ...grpc.CallOption) (*Client, error)
	// Метод для изменения фотографии профиля клиента
	ChangeProfilePhoto(ctx context.Context, in *ChangeProfilePhotoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Метод для обновления пароля клиента
	UpdateClientPassword(ctx context.Context, in *UpdateClientPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Метод для добавления нового клиента
	AddClient(ctx context.Context, in *AddClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Метод для получения списка логинов
	GetLogins(ctx context.Context, in *GetLoginsRequest, opts ...grpc.CallOption) (*GetLoginsResponse, error)
}

type clientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServiceClient(cc grpc.ClientConnInterface) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) SelectClientByLogin(ctx context.Context, in *SelectClientRequest, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, ClientService_SelectClientByLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) ChangeProfilePhoto(ctx context.Context, in *ChangeProfilePhotoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientService_ChangeProfilePhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) UpdateClientPassword(ctx context.Context, in *UpdateClientPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientService_UpdateClientPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) AddClient(ctx context.Context, in *AddClientRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientService_AddClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetLogins(ctx context.Context, in *GetLoginsRequest, opts ...grpc.CallOption) (*GetLoginsResponse, error) {
	out := new(GetLoginsResponse)
	err := c.cc.Invoke(ctx, ClientService_GetLogins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServiceServer is the server API for ClientService service.
// All implementations must embed UnimplementedClientServiceServer
// for forward compatibility
type ClientServiceServer interface {
	// Метод для выборки клиента по логину
	SelectClientByLogin(context.Context, *SelectClientRequest) (*Client, error)
	// Метод для изменения фотографии профиля клиента
	ChangeProfilePhoto(context.Context, *ChangeProfilePhotoRequest) (*emptypb.Empty, error)
	// Метод для обновления пароля клиента
	UpdateClientPassword(context.Context, *UpdateClientPasswordRequest) (*emptypb.Empty, error)
	// Метод для добавления нового клиента
	AddClient(context.Context, *AddClientRequest) (*emptypb.Empty, error)
	// Метод для получения списка логинов
	GetLogins(context.Context, *GetLoginsRequest) (*GetLoginsResponse, error)
	mustEmbedUnimplementedClientServiceServer()
}

// UnimplementedClientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientServiceServer struct {
}

func (UnimplementedClientServiceServer) SelectClientByLogin(context.Context, *SelectClientRequest) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectClientByLogin not implemented")
}
func (UnimplementedClientServiceServer) ChangeProfilePhoto(context.Context, *ChangeProfilePhotoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeProfilePhoto not implemented")
}
func (UnimplementedClientServiceServer) UpdateClientPassword(context.Context, *UpdateClientPasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClientPassword not implemented")
}
func (UnimplementedClientServiceServer) AddClient(context.Context, *AddClientRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClient not implemented")
}
func (UnimplementedClientServiceServer) GetLogins(context.Context, *GetLoginsRequest) (*GetLoginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogins not implemented")
}
func (UnimplementedClientServiceServer) mustEmbedUnimplementedClientServiceServer() {}

// UnsafeClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServiceServer will
// result in compilation errors.
type UnsafeClientServiceServer interface {
	mustEmbedUnimplementedClientServiceServer()
}

func RegisterClientServiceServer(s grpc.ServiceRegistrar, srv ClientServiceServer) {
	s.RegisterService(&ClientService_ServiceDesc, srv)
}

func _ClientService_SelectClientByLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).SelectClientByLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_SelectClientByLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).SelectClientByLogin(ctx, req.(*SelectClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_ChangeProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeProfilePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).ChangeProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_ChangeProfilePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).ChangeProfilePhoto(ctx, req.(*ChangeProfilePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_UpdateClientPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).UpdateClientPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_UpdateClientPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).UpdateClientPassword(ctx, req.(*UpdateClientPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_AddClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).AddClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_AddClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).AddClient(ctx, req.(*AddClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetLogins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetLogins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_GetLogins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetLogins(ctx, req.(*GetLoginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientService_ServiceDesc is the grpc.ServiceDesc for ClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelectClientByLogin",
			Handler:    _ClientService_SelectClientByLogin_Handler,
		},
		{
			MethodName: "ChangeProfilePhoto",
			Handler:    _ClientService_ChangeProfilePhoto_Handler,
		},
		{
			MethodName: "UpdateClientPassword",
			Handler:    _ClientService_UpdateClientPassword_Handler,
		},
		{
			MethodName: "AddClient",
			Handler:    _ClientService_AddClient_Handler,
		},
		{
			MethodName: "GetLogins",
			Handler:    _ClientService_GetLogins_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "database.proto",
}
